
--- 
- hosts: cluster
  gather_facts: no
  max_fail_percentage: 0
  tasks:
    - name: ensure some critical vars are set, fail early if not.
      fail: msg="Please ensure you're setting mapr_version and mapr_cluster_name with --extra-vars"
      when: mapr_version is not defined or mapr_cluster_name is not defined 

    - name: get ec2 facts
      ec2_facts:
      register: ec2_facts

- include: prerequisites.yml

- hosts: zookeepers
  max_fail_percentage: 0
  roles:
    - zookeeper

- hosts: cldb
  max_fail_percentage: 0
  roles:
    - mapr-cldb

- hosts: jobtracker
  max_fail_percentage: 0
  roles:
    - mapr-jobtracker

- hosts: tasktracker
  roles:
    - mapr-tasktracker

- hosts: webserver
  roles:
    - webserver

- hosts: nfs
  roles:
    - mapr-nfs

- hosts: fileserver
  roles:
    - mapr-fileserver

# uncomment the following line to install mysql (hive metastore and metrics)
- include: install_mysql.yml

# Install mapr-metrics
- hosts: hiveserver
  roles:
    - { role: metrics-database,
        mysql_root_user: root,
        mysql_root_password: mapr,
        mysql_host: "{{ groups['hiveserver'] | first }}" }

- hosts: webserver;jobtracker
  roles:
    - { role: mapr-metrics,
        cluster_name: '{{mapr_cluster_name}}',
        metrics_user: maprmetrics,
        metrics_password: mapr,
        metrics_host: "{{ groups['hiveserver'] | first }}" }

- include: configure_cluster.yml

- hosts: zookeepers
  tasks:
    - name: ensure mapr user owns /opt/mapr/zkdata
      file: path=/opt/mapr/zkdata owner=mapr group=mapr mode=0750 state=directory

    - name: start zookeeper on ZK nodes
      service: name=mapr-zookeeper state=started enabled=yes
      register: zk_started

    - name: wait for zookeeper to be listening
      wait_for: port=5181 delay=10 timeout=90

    - name: wait for a few more seconds to let zookeepers initialize
      pause: seconds=15
      when: zk_started.changed

    - name: get zookeeper status
      command: service mapr-zookeeper qstatus
      register: zk_qstatus

- hosts: cldb
  tasks:
    - name: start warden on CLDBs first per doc.mapr.com
      service: name=mapr-warden state=started enabled=yes
      register: cldb_started

    - name: pause for a bit and wait for CLDBs to come up
      pause: seconds=15
      when: cldb_started.changed

- hosts: cluster
  tasks:
    - name: start the warden on all nodes
      service: name={{item}} state=started
      with_items:
        - mapr-warden
      register: warden_started

    - name: wait a bit before proceeding
      pause: seconds=10
      when: warden_started.changed

# Configure all cluster nodes with public key access
# This allows passwordless SSH between cluster nodes for root and mapr users.
- include: authorized_keys.yml

#
# Having installed and started the cluster, install optional ecosystem and client services.
# Some of the below will need to be uncommented, or be run manually.
#


# uncomment the following line to install spark (spark, shark, spark-master)
#- include: install_spark.yml

# uncomment the following line to install hive
#- include: install_hive.yml


# For convenience, print the URL for the MCS.
- hosts: webserver
  gather_facts: no
  tasks:
    - name: get ec2 facts
      ec2_facts:
      register: ec2_facts

    - name: print webserver URLs
      debug: msg="webserver = https://{{ec2_facts.ansible_facts.ansible_ec2_public_hostname}}:8443"
      when: '"ansible_ec2_public_hostname" in ec2_facts.ansible_facts.keys()'

# if this is a virtualbox node, print out the IP for eth1, which is a host interface.
- hosts: virtualbox
  tasks:
    - name: print webserver URLs
      debug: msg="webserver=https://{{ansible_eth1.ipv4.address}}:8443"
      when: "ec2_facts is not defined"
