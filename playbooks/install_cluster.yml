
--- 

# First, install the cluster - all nodes running Hadoop services.

- hosts: all
  max_fail_percentage: 0
  sudo: yes
  roles:
    - prerequisites

- hosts: mysql
  sudo: yes
  roles:
    - mysql-server
    - metrics-database

- hosts: zookeepers
  max_fail_percentage: 0
  sudo: yes
  roles:
    - zookeeper

- hosts: cldb
  max_fail_percentage: 0
  sudo: yes
  roles:
    - mapr-cldb

- hosts: jobtracker
  max_fail_percentage: 0
  sudo: yes
  roles:
    - jobtracker

- hosts: tasktracker
  sudo: yes
  roles:
    - mapr-tasktracker

- hosts: webserver
  sudo: yes
  roles:
    - webserver

- hosts: nfs
  sudo: yes
  roles:
    - nfs

- hosts: fileserver
  sudo: yes
  roles:
    - mapr-fileserver


- hosts: cluster
  sudo: yes
  tasks:
    - name: set a password for the mapr user
      user: name=mapr password="{{mapr_user_pw}}"

    - name: create .ssh for mapr user
      file: path=/home/mapr/.ssh mode=0700 state=directory owner=mapr group=mapr

    - name: create ssh keys for mapr user 
      command: creates=/home/mapr/.ssh/id_dsa ssh-keygen -t dsa -P "" -f /home/mapr/.ssh/id_dsa

    - name: make mapr user owner
      file: path=/home/mapr/.ssh/id_dsa mode=0600 owner=mapr group=mapr 

    - name: fetch ssh key from each node
      fetch: src=/home/mapr/.ssh/id_dsa.pub dest="/tmp/{{ansible_hostname}}-id_dsa.pub" flat=yes

    - name: add all hosts public keys to authorized_keys on all nodes
      authorized_key: key="{{ lookup('file', item) }}" user=mapr 
      with_fileglob:
        - "/tmp/*id_dsa.pub"

- hosts: zookeepers
  sudo: yes
  tasks:
    - name: start zookeeper on ZK nodes
      service: name=mapr-zookeeper state=started enabled=yes
      register: zk_started

    - name: wait for zookeeper to be listening
      wait_for: port=5181 delay=10 timeout=90

    - name: wait for a few seconds to let zookeepers initialize
      pause: seconds=15
      when: zk_started.changed

    - name: get zookeeper status
      command: service mapr-zookeeper qstatus
      register: zk_qstatus

- hosts: cldb
  sudo: yes
  tasks:
    - name: start warden on CLDBs first per doc.mapr.com
      service: name=mapr-warden state=started enabled=yes
      register: cldb_started

    - name: pause for a bit and wait for CLDBs to come up
      pause: seconds=15
      when: cldb_started.changed

- hosts: cluster
  sudo: yes
  tasks:
    - name: start the warden on all nodes
      service: name={{item}} state=started
      with_items:
        - mapr-warden
      register: warden_started

    - name: wait a bit before proceeding
      pause: seconds=10
      when: warden_started.changed


# Having installed and started the cluster, install edge and client services.

- hosts: hiveserver
  sudo: yes
  roles:
    - mapr-client
    - mapr-hive

- hosts: edge
  sudo: yes
  roles:
    - mapr-client
    - mapr-hive

- hosts: spark_master
  sudo: yes
  roles:
    - scala
    - mapr-spark-master

- hosts: spark_slave
  sudo: yes
  roles:
    - scala
    - mapr-spark-slave

# For convenience, print the URL for the MCS.

- hosts: webserver
  sudo: yes
  gather_facts: no
  tasks:
    - name: get ec2 facts
      ec2_facts:
      register: ec2_facts

    - name: debug ec2_facts
      debug: var=ec2_facts

    - name: print webserver URLs
      debug: msg='webserver = https://{{ec2_facts.ansible_facts.ansible_ec2_public_hostname}}:8443'
      when: '"ansible_ec2_public_hostname" in ec2_facts.ansible_facts.keys()'


- hosts: localhost
  tasks:
    - name: clean up the public keys on the local machine
      file: state=absent path={{item}}
      with_fileglob:
          - "/tmp/*id_dsa.pub"
