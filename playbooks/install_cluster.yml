
--- 
- hosts: cluster
  gather_facts: no
  max_fail_percentage: 0
  tasks:
    - name: ensure some critical vars are set, fail early if not.
      fail: msg="Please ensure you're setting mapr_version and mapr_cluster_name with --extra-vars." 
      when: mapr_version is not defined or mapr_cluster_name is not defined

- include: prerequisites.yml tags=install

- hosts: zookeepers
  tags: install
  max_fail_percentage: 0
  roles:
    - zookeeper

- hosts: cldb
  tags: install
  max_fail_percentage: 0
  roles:
    - mapr-cldb

- hosts: jobtracker
  tags: install
  max_fail_percentage: 0
  roles:
    - mapr-jobtracker

- hosts: resourcemanager
  tags: install
  max_fail_percentage: 0
  roles:
    - mapr-resourcemanager

- hosts: historyserver
  tags: install
  max_fail_percentage: 0
  tasks:
    - name: install historyserver
      yum: name=mapr-historyserver state=present

- hosts: tasktracker
  tags: install
  roles:
    - mapr-tasktracker

- hosts: nodemanager
  tags: install
  roles:
    - mapr-nodemanager

- hosts: webserver
  tags: install
  roles:
    - webserver

- hosts: nfs
  tags: install
  roles:
    - mapr-nfs

- hosts: fileserver
  tags: install
  roles:
    - mapr-fileserver

# uncomment the following line to install mysql (hive metastore and metrics)
- include: install_mysql.yml tags=install

# Install mapr-metrics
- hosts: hiveserver
  tags: install,metrics
  roles:
    - { role: metrics-database,
        mysql_root_user: root,
        mysql_root_password: mapr,
        mysql_host: "{{ groups['hiveserver'] | first }}" }


- hosts: webserver;jobtracker;resourcemanager
  tags: metrics
  roles:
    - { role: mapr-metrics,
        cluster_name: '{{mapr_cluster_name}}',
        metrics_user: maprmetrics,
        metrics_password: mapr,
        metrics_host: "{{ groups['hiveserver'] | first }}" }

# uncomment the followng line to install an edge node
- include: install_edgenode.yml tags=edgenode

- include: configure_cluster.yml tags=configure

- hosts: resourcemanager[1]
  tags: install
  max_fail_percentage: 0
  tasks:
    - name: set RM id correctly to work around a bug
      hadoop_properties: name="yarn.resourcemanager.ha.id" state=present value="rm2" file=/opt/mapr/hadoop/hadoop-2.4.1/etc/hadoop/yarn-site.xml


- hosts: zookeepers
  tasks:
    - name: ensure mapr user owns /opt/mapr/zkdata
      file: path=/opt/mapr/zkdata owner=mapr group=mapr mode=0750 state=directory

    - name: start zookeeper on ZK nodes
      service: name=mapr-zookeeper state=started enabled=yes
      register: zk_started

    - name: wait for zookeeper to be listening
      wait_for: port=5181 delay=10 timeout=90

    - name: wait for a few more seconds to let zookeepers initialize
      pause: seconds=15
      when: zk_started.changed

    - name: get zookeeper status
      command: service mapr-zookeeper qstatus
      register: zk_qstatus

- hosts: cldb
  tasks:
    - name: start warden on CLDBs first per doc.mapr.com
      service: name=mapr-warden state=started enabled=yes
      register: cldb_started

    - name: pause for a bit and wait for CLDBs to come up
      pause: seconds=15
      when: cldb_started.changed

- hosts: cluster
  tasks:
    - name: start the warden on all nodes
      service: name={{item}} state=started
      with_items:
        - mapr-warden
      register: warden_started

    - name: wait a bit before proceeding
      pause: seconds=10
      when: warden_started.changed

- hosts: resourcemanager[1]
  tags: install
  max_fail_percentage: 0
  tasks:
    - name: restart RM on all RM nodes
      command: maprcli node services -action restart -filter csvc==resourcemanager -name resourcemanager

- hosts: cluster
  roles:
    - { role: nfs-mount, cluster_name: '{{mapr_cluster_name}}' }

# Configure all cluster nodes with public key access
# This allows passwordless SSH between cluster nodes for root and mapr users.
- include: authorized_keys.yml tags=authorized_keys

#
# Having installed and started the cluster, install optional ecosystem and client services.
# Some of the below will need to be uncommented, or be run manually.
#

# uncomment the following line to install spark (spark, shark, spark-master)
#- include: install_spark.yml

# uncomment the following line to install hbase
#- include: install_hbase.yml

# uncomment the following line to install hive
- include: install_hive.yml tags=hive

# uncomment the following line to install impala
#- include: install_impala.yml

- hosts: cldb[0]
  sudo: yes
  sudo_user: mapr
  tasks:
    - name: set default desired replication to 1
      command: maprcli config save -values "{cldb.volumes.default.replication:1}"
      when: single_node_cluster is defined and single_node_cluster == True

    - name: set default min replication to 1
      command: maprcli config save -values "{cldb.volumes.default.min.replication:1}"
      when: single_node_cluster is defined and single_node_cluster == True

    - name: set replication to 1 if single node
      shell: maprcli volume list -columns volumename | grep -v volumename | awk '{print $1}' | xargs -n1 -I'{}' maprcli volume modify -name '{}' -replication 1 -minreplication 1
      when: single_node_cluster is defined and single_node_cluster == True

# For convenience, print the URL for the MCS.
- include: print_cluster_info.yml tags=cluster_info
